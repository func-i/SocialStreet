<div data-role="page" id="create_what">
  <div data-role="header" data-position="fixed">
    <%= link_to "Back", '/m', {'data-role' => 'button', 'data-theme' => 'a', 'data-position' => 'inline', 'data-icon'=>"arrow-l"}%>
    <h1><%=link_to "SocialStreet", '/m'%></h1>
  </div>

  <script type="text/javascript">
    var keyword;

    $('#create_keywords_list li').live('click', function(li) {
      keyword = $.trim($(this).text());
      $('#create_keyword').val(keyword);
    })

    function captureKeyword(){
      keyword = $('.ui-input-text').first().val();
      $('#no_results a span').text(keyword);
      if($('.result:visible').length == 1) {
        if($('.result:visible a').text() == keyword || $('.result:visible a').text().toLowerCase() == keyword){
          $('#no_results').hide();
        }

      }
      else if ($('.ui-input-text').first().val().length == 0){
        $('#no_results').hide();
      }
      else {
        $('#no_results').show();
      }
    }

    $('#create_what').live("pageshow",function() {
      keyword = "";
      $('#no_results').hide();

      if($('#create_keyword').val().length > 0) {
        $('.ui-input-text').first().val($('#create_keyword').val());
        
        captureKeyword();
        
      }


      $('.ui-input-text').live('keyup', function(){
        captureKeyword($(this).val());
      });
    });
  </script>

  <div data-role ="content">

    <ul data-role="listview" data-theme="a" data-inset="true" data-filter="true" data-filter-placeholder="Enter Keyword..." data-scroll="true" id="create_keywords_list">
      <li id="no_results"> <%= link_to "#create_where" do %>
          <%=  image_tag('/images/event_types/streetmeet2.png', :size => "45x45") %>
          <span></span>
        <% end  %>
      </li>
      <% @event_types.each do |event|%>
        <li class="result">
          <%= link_to image_tag(event.image_path, :size => "45x45") + event.name, "#create_where" %>
        </li>

      <% end %>

    </ul>

  </div>
</div>

<div data-role ="page" id="create_where" class="page-map">
  <div data-role="header" data-position="inline">
    <a data-theme ="a" data-rel="back" data-icon="arrow-l">Back</a>
    <h1><%=link_to "SocialStreet", '/m'%></h1>
    <%= link_to "Next", '#create_when', {'data-role' => 'button', 'data-theme' => 'a'}%>
  </div>

  <script type="text/javascript">

    var userCurrentLocation = ('<%=users_current_location_string()%>').split(",");
    var currentLocation;

<% if @event.new_record? %>
    currentLocation = new google.maps.LatLng((parseFloat(userCurrentLocation[0])), parseFloat(userCurrentLocation[1]));
<% else %>
    currentLocation = new google.maps.LatLng((<%= @event.location.latitude %>), (<%= @event.location.longitude %>));
<% end %>

  var createMap;
  var initMarker;
  var geocoder = new google.maps.Geocoder();
  var createMarkerManager;
  var createMapMarker;

  $('#create_where').live("pageshow", function() {
    $('#map-canvas').gmap({
      'center': currentLocation, 'zoom': 15, 'mapTypeControl' : false,
      'navigationControl': false, 'streetViewControl': false
    });

    if(undefined == createMapMarker){
      createMap = $('#map-canvas').gmap('get', 'map');
      createMarkerManager = new MarkerManager({
        map: createMap
      });
      createMapMarker = createCreateMapMarker();
      findMarkerLocation(createMapMarker);
      createMarkerManager.showAllMarkers();
    }
  });

  function createCreateMapMarker() {
    var marker = createMarkerManager.addMarker(createMap.getCenter().lat(), createMap.getCenter().lng());
    marker.setIcon('/images/create-event-marker.png');
    marker.setShadow(new google.maps.MarkerImage('/images/icon-shadow.png', null, null, new google.maps.Point(17,55)));
    marker.setDraggable(true);
    google.maps.event.addListener(marker, 'dragend', function() {
      findMarkerLocation(this);
    });

    return marker;
  }

  function findMarkerLocation(marker) {
    geocoder.geocode({'location': marker.getPosition()}, function(results, status) {
      if (status == google.maps.GeocoderStatus.OK) {
        marker.setTitle(results[0].formatted_address);
        $('#map-location').val(results[0].formatted_address);
        updateLocationParams();
      }
    });
  }

  function findLocation(location, marker) {
    $('#map-canvas').gmap('search', {'location': location}, function(results, status) {
      if ( status === 'OK' ) {
        $.each(results[0].address_components, function(i,v) {
          if ( v.types[0] == "administrative_area_level_1" || v.types[0] == "administrative_area_level_2" ) {
            $('#state'+marker.__gm_id).val(v.long_name);
          } else if ( v.types[0] == "country") {
            $('#country'+marker.__gm_id).val(v.long_name);
          }
        });
        marker.setTitle(results[0].formatted_address);
        $('#map-location').val(results[0].formatted_address);
        updateLocationParams();
      }
    });
  }

  function updateLocationParams() {
    //bounds =  createMap.getBounds();
    //c = bounds.getCenter();
    c = createMapMarker.getPosition();

    $('#create_map_lat').val(c.lat());
    $('#create_map_lng').val(c.lng());
  }

  $('#map-location').live("keydown", function(e) {
    if (e.keyCode == 13) {
      e.stopPropagation();
      searchLocation(e);
      $(this).blur();
      return false;
    }
    return true;
  });

  function searchLocation(e) {
    var loc = e.target.value;
    var closestResult;
    geocoder.geocode( {
      'address': loc,
      'bounds' : createMap.getBounds()
    }, function(results, status) {
      if (status == google.maps.GeocoderStatus.OK) {
        var selectedMarker = null;
        var distance = 40000;
        createMarkerManager.deleteAllMarkers();

        $.each(results, function(index, result){
          var d = distanceBetweenMapPoints(createMap.getCenter(), result.geometry.location);
          if (d < distance){
            distance = d;
            closestResult = result.geometry.location;
          }
        });
        createMap.setCenter(closestResult);
        createMapMarker = createCreateMapMarker();
        createMarkerManager.showAllMarkers();
        updateLocationParams();
      }
      else {
        alert("Geocode was not successful for the following reason: " + status);
      }
    });
  }

  function distanceBetweenMapPoints(pos1, pos2){
    if(!pos1 || !pos2){
      return 0
    }

    var R = 6371; //Radius of Earth in km
    var dLat = (pos2.lat() - pos1.lat()) * Math.PI / 180;
    var dLon = (pos2.lng() - pos1.lng()) * Math.PI / 180;
    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      (Math.cos(pos1.lat() * Math.PI / 180) * Math.cos(pos2.lat() * Math.PI / 180) *
      Math.sin(dLon / 2) * Math.sin(dLon / 2));
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    var d = R * c;
    return d;
  }


  </script>

  <div>
    <input type="text" name="name" id="map-location" value="" placeholder="Enter an Address or Use Map" />
  </div>

  <div id="map-canvas" class="full-page-map"></div>

</div>

<div data-role ="page" data-theme="a" id="create_when">
  <div data-role="header" data-position="inline">
    <a data-theme ="a" data-rel="back" data-icon="arrow-l">Back</a>


    <h1><%=link_to "SocialStreet", '/m'%></h1>
  </div>

  <script type="text/javascript">
    //Create date
    var monthNamesShort = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    var dayNamesShort = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

    var myDate = new Date();
    var dateHsh = {};
    for(var i=0; i < 90; i++){
      //turn date into string
      var showDateString = dayNamesShort[myDate.getDay()] + " " + myDate.getDate() + " " + monthNamesShort[myDate.getMonth()];
      var actualDateString = myDate.getFullYear() + "_" + (myDate.getMonth() + 1) + "_" + myDate.getDate();

      dateHsh[actualDateString] = showDateString;

      myDate = new Date(myDate.getTime() + 86400000);
    }

    var hourHsh = {};
    for(i=1; i<=12;i++){
      hourHsh[i] = i;
    }

    var minuteHsh = {};
    for(i=0; i<=11;i++){
      minuteHsh[i*5] = i*5;
    }

    var wheels = [{"Date" : dateHsh},{"Hour" : hourHsh, "Minute" : minuteHsh, "" : {AM : "AM", PM: "PM"}}];

    $(function() {
      $('#event_start_date').scroller({
        wheels: wheels,
        width: 40,
        theme: 'ios',
        //btnClass: 'hidden',
        onClose: function(valueText, inst) {

        }

      });

      $('#submit_button').click(function(){
        event.preventDefault();
        updateCreateTimes();
        $('#submit_button').addClass("ui-disabled");
        $('#submit_button span').text("Submitting ... ");
        $(this).closest('form').submit();

      })
    })

    $('#create_when').live('pageshow', function() {
      setDefaultTime();
      $('#event_start_date').scroller('show');
      $('#scroller_holder').empty();
      $('.dw').appendTo('#scroller_holder');
      $('.dww').first().css("width", 123); //hack to make full values show up on screen
      
      //$('select').selectmenu('enable');
    })

    function parseDate_(valueText) {

      split_array = valueText.split("_");
      new_array = split_array[2].split(" ");
      split_array.pop();
      split_array = split_array.concat(new_array);
      for(i=0; i<5; i++){
        split_array[i] = parseInt(split_array[i]);
      }

      if(split_array[5] == "PM") {
        if(split_array[3] != 12)
          split_array[3] += 12;
      }
      else if (split_array[5] == "AM" && split_array[3] == 12) {
        split_array[3] = 0;
      }

      date = split_array[0]+"-"+split_array[1]+"-"+split_array[2]+" "+split_array[3]+":"+split_array[4];


      return date;
    }

    function fixInvalidValues(valueText) {
      var newValueText;
      var fixedDate = new Date();
      temp_array = valueText.split(" ");
      if(temp_array[0] == "NaN" || temp_array[0] == "-1"){
        newValueText = fixedDate.getFullYear() + "/" + (fixedDate.getMonth() + 1) + "/" + fixedDate.getDate();
      }
      else
        newValueText = temp_array[0];

      for(i=1; i<temp_array.length; i++){
        if(temp_array[i] == "NaN" || temp_array[i] == "-501" || temp_array[i] == "-1"){
          if(i == 1)
            newValueText += " " + 1;
          else if(i == 2)
            newValueText += " " + 0;
          else if(i == 3)
            newValueText += " " + "AM";
        }
        else
          newValueText += " " + temp_array[i];
      }
      
      return newValueText;
    }

    function setDefaultTime() {
      var strtime = '<%= @event.start_date %>';
      var strdateArr = strtime.split(" ");
      
      var data = [];
      data[0] = strdateArr[0].replace(/-/g, "_");
      var strtimeArr = []
      strtimeArr = strdateArr[1].split(":");
      
      data[2] = strtimeArr[1];
      
      var strHour = parseInt(strtimeArr[0]);
      if( strHour > 12 ){
        strHour = strHour%12;
        data[1] = strHour.toString();
        data[3] = "PM";
      }
      else if(strHour == 12){
        data[1] = strHour.toString();
        data[3] = "PM";
      }

      else if(strHour == 0){
        data[1] = "12";
        data[3] = "AM";
      }

      else {
        data[1] = strHour.toString();
        data[3] = "AM";
      }

      $('#event_start_date').scroller('setValue', data);
    }

    function updateCreateTimes() {
      
      var valueText = $('.dwv').text();

      if(valueText.match("NaN") || valueText.search("/") == -1){
        valueText = fixInvalidValues(valueText);
        $('#event_start_date').val(valueText);
      }

      var formattedStartDate = parseDate_(valueText);
      $('#event_start_date').val(formattedStartDate);

      var start_date = $('#event_start_date').val();
      var split_date = start_date.split(" ");
      var dateArray       = split_date[0].split("-");
      var time_split = split_date[1].split(":");
      
      var start_hour = time_split[0];
      var start_min  = time_split[1];

      //fixing date month and day to rjust to 2 chars
      var date = dateArray[0] + "-" + dateArray[1].rjust(2, "0") + "-" + dateArray[2].rjust(2, "0");

      start_date = new Date(getDateFromFormat(date, 'yyyy-mm-dd'));
      start_date.setHours(start_hour);
      start_date.setMinutes(start_min);
      
      var duration = $('#duration').val();
      var duration_size = $('#duration_size').val();

      if(duration_size == "Minutes"){
        duration = duration*60000;
      }
      else if(duration_size == "Hours"){
        duration = duration*3600000;
      }
      else if(duration_size == "Days"){
        duration = duration*86400000;
      }

      var end_date = new Date(start_date.getTime());
      end_date.setMilliseconds(start_date.getMilliseconds() + duration);

      $('#event_start_date').val(ssFormatDate(start_date, 'yyyy/MM/dd HH:mm'));
      $('#event_end_date').val(ssFormatDate(end_date, 'yyyy/MM/dd HH:mm'));
      
    }

  </script>

  <div data-role="content">
    <input type="hidden" name="event[event_keywords_attributes][][name]" value="<%=@event.event_keywords.first.try(:name)%>" id="create_keyword" />

    <% (@event.event_groups || []).each do |event_group| %>
      <% groupID = event_group.group_id || 'public' %>
      <input type="hidden" class="event-group-input" id="event_group_input_<%=groupID%>" name="group[<%=groupID%>]" value="<%= event_group.can_attend ? 2 : event_group.can_view ? 1 : 0%>"/>
    <% end %>

    <div id="scroller_holder">

    </div>

    <%= form.hidden_field :start_date, :class => "mobiscroll"%>
    <%= form.hidden_field :end_date %>


    <div data-role="fieldcontain">
      <fieldset class="ui-grid-a">
        <label for="duration">Duration: </label>
        <% duration, duration_size = @event.duration_array %>
        <div class="ui-block-a"><%= select_tag :duration, options_for_select((1...23).to_a, duration), :id =>"duration" %></div>
        <div class="ui-block-b"><%= select_tag :duration_size, options_for_select([["Minutes"],["Hours"],["Days"]], duration_size), :id => "duration_size" %></div>
      </fieldset>
    </div>

    <%= form.fields_for :location do |location_fields| %>
      <%= location_fields.hidden_field :latitude, :id => 'create_map_lat' %>
      <%= location_fields.hidden_field :longitude, :id => 'create_map_lng'%>
    <%  end %>

    <%= link_to "Submit", "#", {"data-role" => "button", "data-theme" => "e", "id" => "submit_button"} %>

  </div>

</div>