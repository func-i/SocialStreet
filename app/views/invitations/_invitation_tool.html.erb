<style>
  .user.selected {
    background-color: #DDD;
  }
  .user-list {
    overflow: scroll;
  }
  .selected-list {
    overflow: scroll;
  }

  .selected-list-invitations .remove-btn {
    display: block;
  }
</style>

<div class="form-holder">
  <div class="row">
    <%= form_tag new_event_rsvp_invitation_path(@event, @rsvp), :method => :get, :remote => true, :class => "form search-params-invitations" do %>
      <%= text_field_tag "user_search", params[:user_search], :class => "text_field search-field text text1", :placeholder => "Name or email"-%>
    <%- end -%>
  </div>
  <p><strong>Check as many friends or enter one email at a time</strong></p>
</div>
<div class="users-holder">
  <div class="users-list">
    <div class="ul1 user-list">
      <ul id="invitation-user-list">
        <%= render "invitations/user_results" -%>
      </ul>
    </div>
  </div>
  <%= render 'shared/form_submit_button' %>
</div>

<script>
  var searchURL = '<%= connections_path %>';
  var timeout = null;

  $(function() {
    
    var $userList = $('.user-list');
    var lastQuery = '';

    $('.user-list .user-invitation').live('click', function(e) {
      var $this = $(this);
      var userId = $this.data('user-id');

      // make sure it's removeable before removing the invite
      if ($this.hasClass('selected') && !$this.hasClass('cannot-remove')) {
        $this.removeClass('selected');
        $selectedListInvitations.find('.user[data-user-id="'+userId+'"]').remove();
      } else if (!$this.hasClass('selected')) {
        $this.addClass('selected');
        $selectedListInvitations.prepend($this.clone());
      }
    });
    // Need to use .live() b/c elements in selected-list are dynamically added
    // So they may not be there at DOM ready time
    $('.selected-list-invitations .user-invitation .remove-btn').live('click', function(e) {
      var $user = $(this).closest('.user-invitation');
      var userId = $user.data('user-id');
      $user.remove();
      $userList.find('.user[data-user-id="'+userId+'"]').removeClass('selected');
      return false;
    });

    var refreshTimer = null;

    function refreshResults() {

      if (refreshTimer) {
        clearInterval(refreshTimer);
        delete refreshTimer;
      }
      refreshTimer = setTimeout(function() {
        $('form.search-params-invitations').submit();
      }, 250);
    }

    
    var $selectedListInvitations = $('.selected-list-invitations');

    function addEmail() {

      var $input = $('#user_search');
      var email = $input.val();

      // make sure it's a valid email that was not already included in the list
      if (isEmail(email) && $selectedListInvitations.find('input[value="'+email+'"]').size() == 0) {
        $input.val('');
        var u = $('<div class="user email-only">' +
          '<div class="avatar"><img src="/images/avatar.gif" alt="Avatar"></img></div>' +
          '<span class="name">'+email+'</span>' +
          '<a href="#" class="remove-btn">[X]</a>' +
          '<div class="clear"></div>' +
          '<input type="hidden" name="emails[]" value="'+email+'"/>' +
          '</div>');
        $selectedListInvitations.prepend(u);
      }
    }

    $('#user_search').keyup(function(e) {      
      if (e.keyCode == 13) {        
        addEmail();
      }
      else
        refreshResults();
    });    

    $('button.button').click(function() {
      $('form.form').submit();
    });
    
  });

  function isEmail(string) {
    var reg = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;
    return reg.test(string);
  }
</script>
