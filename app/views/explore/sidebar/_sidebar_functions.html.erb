<% content_for :end_of_body do %>
  <%= javascript_include_tag 'marker_clusterer', 'ss_pageless', 'keywords_field', 'jquery.getUrlParam' %>
  <script>

    var keywordsJsonURL = "<%= event_types_path(:format => :json) %>";
    var refreshTimer = null;
    var keywordsParamKey = "keywords[]";

    function getSearchParams() {
      var str = "?&map_bounds=" + $('#map_bounds').val() + "&map_center=" + $('#map_center').val() + "&map_zoom=" + $('#map_zoom').val() + "&from_date=" + $('#from_date').val() + "&selected_searchable=" + $('#selected_searchable').val();

      // TODO make this work with the top explore
      
      if($('[name="keywords\\[\\]"]').length > 0)
        str += "&" + $('[name="keywords\\[\\]"]').serialize();

      if($('[name="date_search\\[\\]"]').length > 0)
        str += "&" + $('[name="date_search\\[\\]"]').serialize();

      if($('#view').val() != "")
        str += "&view=" + $('#view').val();

      return str;
    }

    var explorePageless = null;

    function makeExplorePageless(){
      explorePageless = new Pageless({
        loaderContainer: '#pageless-container',
        totalPages: <%= @num_pages -%>,
        currentPage: 1,
        url: '<%= explore_path %>',
        parameterFunction: exploreParamFunction
      });
      explorePageless.start();

      function exploreParamFunction(){
        my_params = {};

        var events_offset = $('#events-offset');
        if(events_offset.length > 0){
          my_params['events_offset'] = events_offset.val();
        }

        var messages_offset = $('#messages-offset');
        if(messages_offset.length > 0){
          my_params['messages_offset'] = messages_offset.val();
        }

        var filter_level = $('#filter-level');
        if(filter_level.length > 0){
          my_params['filter_level'] = filter_level.val();
        }

        var explore_id = $('#explore-id');
        if(explore_id.length > 0){
          my_params['explore_id'] = explore_id.val();
        }

        $.extend(my_params, $('form.search-params').serializeObject());

        return my_params;
      }
    }

    function getExplorePageless(){
      return explorePageless;
    }

    $('form.search-params').bind('ajax:beforeSend', function() {
      $('#action-list').fadeTo('fast', 0.5);
      $('#ajax-spinner').show();
      return true;
    }).bind('ajax:success', function() {
      // TODO Krum put this in to listen to wait until all requests are done, but sometimes with pageless the list never unfades
      //if ($.active == 1) {
      $('#action-list').fadeTo('fast', 1);
      //}
    }).bind('ajax:complete', function() {
      $('#ajax-spinner').hide();
    });

    $("form.search-params").
      find('input[type="text"],input[type="text"],select,input[type="checkbox"]').not('.do-not-submit').
      change( function(){refreshResults("explore")}); // on change of the search form fields, refresh the results

    $('a.save-button').click(function(e) {
      var f = $('form.search-params');
      var s = f.serialize();
      popup_modal_ajax('#empty_modal_base', 'Follow this Search', '<%=new_search_subscription_path(:js)%>?' + s, null)
      //window.location = '<%#= new_search_subscription_url %>?' + s;
      return false;
    });

    $( "#from_date" ).datepicker({
      dateFormat: 'M. dd, yy'
    });
    $( "#to_date" ).datepicker({
      dateFormat: 'M. dd, yy'
    });

    $("#from_date").live("change", function(){
      refreshResults("explore");
    });

  <% if !params[:view].eql?("map") %>
    makeExplorePageless();
  <% end %>

  </script>

  <script>
    var sideBarMarkers = [];
    var sideMap;
    var selectedMarker;
    var infoWindow;
    var geocoder;
    var markerCluster;

    function clearSidebarMarkers() {
      $.each(sideBarMarkers, function(index, marker) {
        marker.setMap(null);
      });
      sideBarMarkers = [];
    }

    function clearSidebarClusterMarkers() {
      markerCluster.clearMarkers();
      sideBarMarkers = [];
    }
    
    function placeSidebarClusterMarkers(){
      if(sideBarMarkers.length > 0)
        markerCluster.addMarkers(sideBarMarkers);
    }

    function placeExploreMarker_MapView(location, searchableID, geocodableAddress){
      var icoImage = "/images/map_pin.png";

      //If pin is selected from url bar
      var selected = false;
      if(searchableID == <%= params[:selected_searchable].to_i -%>)
      {
        selected = true;

        icoImage = '/images/ico-pin-selected.png';
        $('#result_for_searchable_' + searchableID).show();
      }

      //Create pin
      var marker = new google.maps.Marker({
        map: sideMap,
        position: location,
        icon: icoImage
      });
      marker.searchableID = searchableID;
      marker.geocodableAddress = geocodableAddress;

      //Select the marker if set from url bar
      if(selected == true){
        selectedMarker = marker;
        selectMarker_MapView(marker)
      }

      //Add listener for the click event
      google.maps.event.addListener(marker, 'click', function()
      {
        marker.setIcon("/images/ico-pin-selected.png");
        selectMarker_MapView(marker);
      });

      //Push marker onto marker list
      sideBarMarkers.push(marker);
    }

    function placeExploreMarker_ListView(location, searchableID, geocodableAddress){
      var icoImage = "/images/map_pin.png";

      //Create pin
      var marker = new google.maps.Marker({
        map: sideMap,
        position: location,
        icon: icoImage
      });
      marker.searchableID = searchableID;
      marker.geocodableAddress = geocodableAddress;

      //Add listener for the mouseover and mouseout events
      /*      google.maps.event.addListener(marker, 'mouseover', function()
      {
        console.log("mouseOver");
        marker.setIcon("/images/ico-pin-selected.png");
        console.log($('#result_for_searchable_' + marker.searchableID));
        $('#result_for_searchable_' + marker.searchableID).css('background-color', 'red');
      });
      google.maps.event.addListener(marker, 'mouseover', function()
      {
        console.log("mouseOut");
        marker.setIcon("/images/map_pin.png");
        $('#result_for_searchable_' + marker.searchableID).css('background-color', '#FFFFFF');
      });*/

      //Push marker onto marker list
      sideBarMarkers.push(marker);
    }

    function placeExploreMarker(location, searchableID, geocodableAddress) {
  <% if params[:view].eql?("map") %>
      placeExploreMarker_MapView(location, searchableID, geocodableAddress);
  <% else %>
      placeExploreMarker_ListView(location, searchableID, geocodableAddress);
  <% end %>
  }

  function selectMarker_MapView(marker) {
    //New selected marker - set old marker to regular icon
    if(selectedMarker != null && selectedMarker != marker)
    {
      if(selectedMarker instanceof Cluster){
        selectedMarker.isSelected(false);
        selectedMarker.updateIcon();
      }
      else{
        selectedMarker.setIcon("/images/map_pin.png");
      }
    }

    //Set marker
    selectedMarker = marker;

    //Hide each element in the map result list
    $.each($('.result-list-item'), function(index, rLI) {
      $(rLI).hide();
    });

    if(marker instanceof Cluster){
      var isAddressSet = false;
      var cMarkers = marker.getMarkers();
      $.each(cMarkers, function(index, mkr){
        //Show the elements with this id
        $('#result_for_searchable_' + mkr.searchableID).show();

        if(0 == index){
          //Set form param to marker id for url reload
          $('#selected_searchable').val(mkr.searchableID);
        }
        if(!isAddressSet){
          if(mkr.geocodableAddress != null){
            $('.address').html('Near ' + mkr.geocodableAddress);
            isAddressSet = true;
          }
          else{
            $('.address').html('');
          }
        }
      });
    }
    else{
      //Show the elements with this id
      $('#result_for_searchable_' + marker.searchableID).show();

      //Set form param to marker id for url reload
      $('#selected_searchable').val(marker.searchableID);

      //Set the address in the map view result header
      if(marker.geocodableAddress != null){
        $('.address').html(marker.geocodableAddress);
      }
      else{
        $('.address').html('');
      }
    }
  }

  function moveExploreMap(e, latLng) {
    if(latLng == null) {
      var loc = e.target.value;
      geocoder.geocode({address: loc}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
          sideMap.setCenter(results[0].geometry.location);
          changeExploreLocationParams();
          $('#location-not-found').hide();
        } else if (status == google.maps.GeocoderStatus.ZERO_RESULTS) {
          $('#location-not-found').show();
        }
      });
    }
    else if(latLng != null) {
      sideMap.setCenter(latLng);
      changeExploreLocationParams();
      $('#location-not-found').hide();
    }
  }

  function changeExploreLocationParams(event) {
    setTimeout(function() {
      var zoom = sideMap.getZoom();
      $('#map_zoom').val(zoom);

      bounds = sideMap.getBounds();
      ne = bounds.getNorthEast();
      sw = bounds.getSouthWest();
      c = bounds.getCenter();

      $('#map_bounds').val(ne.lat() + ',' + ne.lng() + ',' + sw.lat() + ',' + sw.lng());
      $('#map_center').val(c.lat() + ',' + c.lng());

      if(history && history.replaceState)
        history.replaceState(null, null, getSearchParams());

      refreshResults("explore");
    }, 15);
  }

  function setMapLocation(resultType){
    var latlng = sideMap.getCenter();
    geocoder.geocode( {
      'latLng': latlng
    }, function(results, status) {
      if (status == google.maps.GeocoderStatus.OK)
        $.each(results, function(index, result){
          $.each(result.types, function(index_2, type){
            if(type == resultType){
              $('#map_location').val(result.formatted_address);
              updateCommentBox();
            }
          });
      });
    });
  }

  $(function() {

    //Update comment box address and keywords
    updateCommentBox();

    //History for ajax calls
    if(history && history.pushState) {
      //if(!$.browser.webit==true){
      $(window).bind("popstate", function(){

        var keywordParams = $(document).getUrlParam("keywords[]");
        if(typeof keywordParams == "string" || keywordParams == null)
          keywordParams = new Array(keywordParams);

        $.each(keywordParams, function(keywordIndex, keywordParam) {
          addKeyword(keywordParam, '#explore-keywords');
        });

        $.each(arraySubtract(existingKeywords('#explore-keywords'), keywordParams), function(mk, missingKeyword){
          removeKeyword(missingKeyword);
        });

        if($(document).getUrlParam("map_center") != null)
          sideMap.setCenter(new google.maps.LatLng($(document).getUrlParam("map_center").split(",")[0], $(document).getUrlParam("map_center").split(",")[1]))


        var dtOptions = $(document).getUrlParam("date_search[]");

        if(dtOptions != undefined) {

          var uScapedDtOptions = new Array;

          if(dtOptions instanceof Array) {
            $.each(dtOptions, function(i, e) {
              uScapedDtOptions.push(unescape(e));
            });
          }
          else
            uScapedDtOptions.push(unescape(dtOptions));

          $.each($('.calendar-times'), function(index, ele) {
            if($.inArray($(ele).attr("d-pos"), uScapedDtOptions) > -1)
              $(ele).addClass('select');
            else
              $(ele).removeClass('select');
          });
        }
        else {
          $.each($('.calendar-times'), function(index, ele) {
            $(ele).removeClass('select');
          });
        }


        $.getScript(location.href);
      });
      //}
    }

    //Bind for address text box
    $('#map_location').keydown(function(e) {
      if (e.keyCode == 13) {
        e.stopPropagation();
        moveExploreMap(e);
        return false;
      }
      return true;
    });


    /* geolocation and map stuff */
    var loc = new google.maps.LatLng(<%= params[:map_center].split(",").first %>, <%= params[:map_center].split(",").last %>);

    //Create sidemap
    var sidebarMapOptions = {
      zoom: <%= params[:map_zoom] || 9 %>,
      center: loc,
      mapTypeControl: false,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      streetViewControl: false
    };

    sideMap = new google.maps.Map(document.getElementById("location-map"), sidebarMapOptions);

    var styles = [
      {
        url: '../images/map_pin.png',
        height: 41,
        width: 33,
        anchor: [12, 14],
        textSize: 8,
        textColor: 'red'
      },
      {
        url: '../images/map_pin.png',
        height: 41,
        width: 33,
        anchor: [12, 12.5],
        textSize: 8,
        textColor: 'red'
      },
      {
        url: '../images/ico-pin-selected.png',
        height: 45,
        width: 37,
        anchor: [14.5, 16.5],
        textSize: 8,
        textColor: 'black'
      },
      {
        url: '../images/ico-pin-selected.png',
        height: 45,
        width: 37,
        anchor: [14, 14.5],
        textSize: 8,
        textColor: 'black'
      }
    ];
    var mcSidebarOptions = {
      gridSize: 30,
      maxZoom: 20,
      averageCenter: false,
      zoomOnClick: false,
      styles: styles
    };
    markerCluster = new MarkerClusterer(sideMap, sideBarMarkers, mcSidebarOptions);

    markerCluster.setCalculator(function(markers, numStyles, isSelected)
    {
      var index = 0;
      var count = markers.length;
      var dv = count;
      while (dv !== 0) {
        dv = parseInt(dv / 10, 10);
        index++;
      }

      index = Math.min(index, numStyles/2); //divide by two for selected state at end
      if(isSelected){
        index = index + numStyles/2
      }
      return {
        text: count,
        index: index
      };
    });


  <%- if params[:view].eql?("map") -%>
      google.maps.event.addListener(markerCluster, 'clusterclick', function(cluster) {
        cluster.isSelected(true);
        cluster.updateIcon();

        selectMarker_MapView(cluster);
      });
  <%- end -%>


  <% if params[:view] == "list" && !params[:map_bounds].blank? %>
    <%# # order: ne_lat, ne_lng, sw_lat, sw_lng  %>
    <% ne_lat, ne_lng, sw_lat, sw_lng = params[:map_bounds].split(",") %>
//      sideMap.setZoom(<%= params[:map_zoom].to_i - 1 %>);
//      sideMap.fitBounds(new google.maps.LatLngBounds(
//      new google.maps.LatLng(<%= sw_lat %>, <%= sw_lng %>),
//      new google.maps.LatLng(<%= ne_lat %>, <%= ne_lng %>)));
      
  <% end %>
    //infoWindow = new google.maps.InfoWindow();
    geocoder = new google.maps.Geocoder();

    setMapLocation("street_address");
    
    google.maps.event.addListener(sideMap, 'zoom_changed', changeExploreLocationParams);
    google.maps.event.addListener(sideMap, 'dragend', changeExploreLocationParams);
    //google.maps.event.addListener(sideMap, 'resize', changeExploreLocationParams);
    //$(window).resize(changeLocationParams);
  <% (@searchables || []).each do |searchable| %>
    <% if searchable.geo_located? %>
        placeExploreMarker(new google.maps.LatLng(<%= searchable.location.latitude %>, <%= searchable.location.longitude %>), <%= searchable.id -%>,'<%= searchable.location_address_for_explore -%>');
    <% end %>
  <% end %>

    placeSidebarClusterMarkers();

  });
  </script>
<% end %>
