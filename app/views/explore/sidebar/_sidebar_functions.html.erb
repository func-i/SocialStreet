<% content_for :end_of_body do %>
  <%= javascript_include_tag 'ss_markerManager', 'ss_pageless', 'keywords_field', 'jquery.getUrlParam' %>
  <script type='text/javascript'>

    var keywordsJsonURL = "<%= event_types_path(:format => :json) %>";
    var refreshTimer = null;
    var keywordsParamKey = "keywords[]";

    function getSearchParams() {
      var str = "?&map_bounds=" + $('#map_bounds').val() + "&map_center=" + $('#map_center').val() + "&map_zoom=" + $('#map_zoom').val() + "&from_date=" + $('#from_date').val() + "&selected_searchable=" + $('#selected_searchable').val();

      // TODO make this work with the top explore
      
      if($('[name="keywords\\[\\]"]').length > 0)
        str += "&" + $('[name="keywords\\[\\]"]').serialize();

      if($('[name="date_search\\[\\]"]').length > 0)
        str += "&" + $('[name="date_search\\[\\]"]').serialize();

      if($('#view').val() != "")
        str += "&view=" + $('#view').val();

      return str;
    }

    var explorePageless = null;

    function makeExplorePageless(){
      explorePageless = new Pageless({
        loaderContainer: '#pageless-container',
        totalPages: <%= @num_pages -%>,
        currentPage: 1,
        url: '<%= explore_path %>',
        parameterFunction: exploreParamFunction
      });
      explorePageless.start();

      function exploreParamFunction(){
        my_params = {};

        var events_offset = $('#events-offset');
        if(events_offset.length > 0){
          my_params['events_offset'] = events_offset.val();
        }

        var messages_offset = $('#messages-offset');
        if(messages_offset.length > 0){
          my_params['messages_offset'] = messages_offset.val();
        }

        var filter_level = $('#filter-level');
        if(filter_level.length > 0){
          my_params['filter_level'] = filter_level.val();
        }

        var explore_id = $('#explore-id');
        if(explore_id.length > 0){
          my_params['explore_id'] = explore_id.val();
        }

        $.extend(my_params, $('form.search-params').serializeObject());

        return my_params;
      }
    }

    function getExplorePageless(){
      return explorePageless;
    }

    $('form.search-params').bind('ajax:beforeSend', function() {
      $('#action-list').fadeTo('fast', 0.5);
      $('#ajax-spinner').show();
      return true;
    }).bind('ajax:success', function() {
      // TODO Krum put this in to listen to wait until all requests are done, but sometimes with pageless the list never unfades
      //if ($.active == 1) {
      $('#action-list').fadeTo('fast', 1);
      //}
    }).bind('ajax:complete', function() {
      $('#ajax-spinner').hide();
    });

    $("form.search-params").
      find('input[type="text"],input[type="text"],select,input[type="checkbox"]').not('.do-not-submit').
      change( function(){refreshResults("explore")}); // on change of the search form fields, refresh the results

    $('a.save-button').click(function(e) {
      var f = $('form.search-params');
      var s = f.serialize();
      popup_modal_ajax('#empty_modal_base', 'Follow this Search', '<%=new_search_subscription_path(:js)%>?' + s, null)
      //window.location = '<%#= new_search_subscription_url %>?' + s;
      return false;
    });

    $( "#from_date" ).datepicker({
      dateFormat: 'M. dd, yy',
      showOn: "both",
      buttonImage: '/images/calendar_grey.png',
      buttonImageOnly: true
    });
    $( "#to_date" ).datepicker({
      dateFormat: 'M. dd, yy',
      showOn: "both",
      buttonImage: '/images/calendar_grey.png',
      buttonImageOnly: true
    });

    $("#from_date").live("change", function(){
      refreshResults("explore");
    });

  <% if !params[:view].eql?("map") %>
    makeExplorePageless();
  <% end %>

  </script>

  <script type='text/javascript'>
    var sideBarMarkers = [];
    var sideMap;
    var selectedMarker;
    var infoWindow;
    var geocoder;
    var markerManager;

    function getMarkerManager(){
      return markerManager;
    }

    function moveExploreMap(e, latLng) {
      if(latLng == null) {
        var loc = e.target.value;
        geocoder.geocode({address: loc}, function(results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
            sideMap.setCenter(results[0].geometry.location);
            changeExploreLocationParams();
            $('#location-not-found').hide();
          } else if (status == google.maps.GeocoderStatus.ZERO_RESULTS) {
            $('#location-not-found').show();
          }
        });
      }
      else if(latLng != null) {
        sideMap.setCenter(latLng);
        changeExploreLocationParams();
        $('#location-not-found').hide();
      }
    }

    function changeExploreLocationParams(event) {
      setTimeout(function() {
        var zoom = sideMap.getZoom();
        $('#map_zoom').val(zoom);

        bounds = sideMap.getBounds();
        ne = bounds.getNorthEast();
        sw = bounds.getSouthWest();
        c = bounds.getCenter();

        $('#map_bounds').val(ne.lat() + ',' + ne.lng() + ',' + sw.lat() + ',' + sw.lng());
        $('#map_center').val(c.lat() + ',' + c.lng());

        if(history && history.replaceState)
          history.replaceState(null, null, getSearchParams());

        setMapLocation("street_address");
      
        refreshResults("explore");
      }, 15);
    }

    function setMapLocation(resultType){
      var latlng = sideMap.getCenter();
      geocoder.geocode( {
        'latLng': latlng
      }, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK){
          var resultText = "";
          $.each(results, function(index, result){
            $.each(result.types, function(index_2, type){
              if(type == resultType){
                if(resultType == 'street_address'){
                  var streetNum = "";
                  var streetName = "";
                  var city = "";
                  $.each(result.address_components, function(index_3, component){
                    $.each(component.types, function(index_3, component_type){
                      if(component_type == "street_number")
                        streetNum = component.long_name;
                      else if(component_type == "route")
                        streetName = component.long_name;
                      else if(component_type == "locality")
                        city = component.long_name;
                    });
                  });

                  resultText = streetNum + ' ' + streetName + ', ' + city;
                }
                else{
                  resultText = result.formatted_address;
                }
              }
            });
          });

          $('#map_location').val(resultText);
          updateCommentBox();
        }
      });
    }

    $(function() {

      //Update comment box address and keywords
      updateCommentBox();

      //History for ajax calls
      if(history && history.pushState) {
        //if(!$.browser.webit==true){
        $(window).bind("popstate", function(){

          var keywordParams = $(document).getUrlParam("keywords[]");
          $.each(keywordParams, function(e, i) {
            e = e.replace("+", "");
          });

          if(typeof keywordParams == "string" || keywordParams == null)
            keywordParams = new Array(keywordParams);

          $.each(keywordParams, function(keywordIndex, keywordParam) {
            addKeyword(keywordParam, '#explore-keywords');
          });

          $.each(arraySubtract(existingKeywords('#explore-keywords'), keywordParams), function(mk, missingKeyword){
            removeKeyword(missingKeyword);
          });

          if($(document).getUrlParam("map_center") != null)
            sideMap.setCenter(new google.maps.LatLng($(document).getUrlParam("map_center").split(",")[0], $(document).getUrlParam("map_center").split(",")[1]))


          var dtOptions = $(document).getUrlParam("date_search[]");

          if(dtOptions != undefined) {

            var uScapedDtOptions = new Array;

            if(dtOptions instanceof Array) {
              $.each(dtOptions, function(i, e) {
                uScapedDtOptions.push(unescape(e));
              });
            }
            else
              uScapedDtOptions.push(unescape(dtOptions));

            $.each($('.calendar-times'), function(index, ele) {
              if($.inArray($(ele).attr("d-pos"), uScapedDtOptions) > -1)
                $(ele).addClass('select');
              else
                $(ele).removeClass('select');
            });
          }
          else {
            $.each($('.calendar-times'), function(index, ele) {
              $(ele).removeClass('select');
            });
          }


          $.getScript(location.href);
        });
        //}
      }

      //Bind for address text box
      $('#map_location').keydown(function(e) {
        if (e.keyCode == 13) {
          e.stopPropagation();
          moveExploreMap(e);
          return false;
        }
        return true;
      });


      /* geolocation and map stuff */
      var loc = new google.maps.LatLng(<%= params[:map_center].split(",").first %>, <%= params[:map_center].split(",").last %>);

      //Create sidemap
      var sidebarMapOptions = {
        zoom: <%= params[:map_zoom] || 9 %>,
        center: loc,
        mapTypeControl: false,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        streetViewControl: false
      };

      sideMap = new google.maps.Map(document.getElementById("location-map"), sidebarMapOptions);

      var crosshairShape = {coords:[0,0,0,0],type:'rect'};
      var crosshair_marker = new google.maps.Marker({
        map: sideMap,
        icon: 'http://www.daftlogic.com/images/cross-hairs.gif',
        shape: crosshairShape
      });
      crosshair_marker.bindTo('position', sideMap, 'center');

      //infoWindow = new google.maps.InfoWindow();
      geocoder = new google.maps.Geocoder();

      setMapLocation("street_address");
    
      google.maps.event.addListener(sideMap, 'zoom_changed', changeExploreLocationParams);
      google.maps.event.addListener(sideMap, 'dragend', changeExploreLocationParams);
      //google.maps.event.addListener(sideMap, 'resize', changeExploreLocationParams);
      //$(window).resize(changeLocationParams);

      markerManager = new MarkerManager({
        map: sideMap,
        gridSize: 15,
        mapView: <%= params[:view].eql?('map') ? 'true' : 'false' %>,
        listView: <%= params[:view].eql?('map') ? 'false' : 'true' %>
      });

  <% (@searchables || []).each do |searchable| %>
    <% if searchable.geo_located? %>
        //placeExploreMarker(new google.maps.LatLng(<%= searchable.location.latitude %>, <%= searchable.location.longitude %>), <%= searchable.id -%>,'<%= searchable.location_address_for_explore -%>');
        markerManager.createMarker(new google.maps.LatLng(<%= searchable.location.latitude %>, <%= searchable.location.longitude %>), <%= searchable.id -%>,'<%= searchable.location_address_for_explore -%>');
    <% end %>
  <% end %>

  <% (@similar_results || []).each do |searchable| %>
    <% if searchable.geo_located? %>
        //placeExploreMarker(new google.maps.LatLng(<%= searchable.location.latitude %>, <%= searchable.location.longitude %>), <%= searchable.id -%>,'<%= searchable.location_address_for_explore -%>');
        markerManager.createMarker(new google.maps.LatLng(<%= searchable.location.latitude %>, <%= searchable.location.longitude %>), <%= searchable.id -%>,'<%= searchable.location_address_for_explore -%>');
    <% end %>
  <% end %>

  });
  </script>
<% end %>
