<% content_for :sidebar do %>
  <%= form_tag '#', :method => :get, :remote => true, :class => "form search-params", "data-save-action" => search_subscriptions_path do %>
    <div class="box map">
      <div class="heading">
        <fieldset class="search-address">
          <label for="where1">Where?</label>
          <%= text_field_tag 'map_location', params[:map_location], :class => "text_field do-not-submit text", :placeholder => "Enter Address" %>
        </fieldset>
      </div>
      <div class="map-holder">
        <div id="location-map" class="map-frame" style="width:297px;height:208px;"></div>
      </div>
    </div>
    <div class="box box1">
      <div class="heading">
        <fieldset class="search-address">
          <label for="keywords1">What?</label>
          <%= text_field_tag 'q', params[:q], :class => "q-textfield text_field do-not-submit text", :placeholder => "Add Keywords", "keyword-content-selector" => '#explore-keywords' %>
        </fieldset>
      </div>
      <div class="box-content">
        <ul id="explore-keywords" class="keyword">
          <% (params[:keywords] || []).each do |keyword| %>
            <li class="keyword-pill">
              <input type="hidden" name="keywords[]" value="<%= keyword %>" />
              <%= keyword %>
              <%= link_to('close', '#', :class => "remove-parent close", "data-parent-selector" => ".keyword-pill") %>
            </li>
          <% end %>
        </ul>
      </div>
    </div>

    <div class="box box1">
      <div class="heading">
        <h3>When?</h3>
        <a href="#" class="btn">btn</a>
      </div>
      <div class="box-content">
        <div class="jump-date">
          <div class="col">
            <span>Start date:</span>
            <%= text_field_tag 'from_date', params[:from_date] || "Set", :class => "text_field", :style => "width: 80px; background: none; border: none;" %>
          </div>
          <div class="col" style="margin-left: 10px;">
            <span>End date:</span>
            <%= text_field_tag 'to_date', params[:to_date] || "Set", :class => "text_field", :style => "background: none; border: none;" %>
          </div>
        </div>
        <div class="time-slot">
          <div class="col1">
            <div class="ttl">Availablity:</div>
            <div class="row">Morning</div>
            <div class="row">Afternoon</div>
            <div class="row">Evening</div>
          </div>
          <div class="col2">
            <div class="days-week">
              <div>
                <span>Sun</span>
                <span>Mon</span>
                <span>Tue</span>
                <span>Wed</span>
                <span>Thu</span>
                <span>Fri</span>
                <span>Sat</span>
              </div>
            </div>
            <table>
              <%- 3.times do |tm| -%>
                <tr>
                  <%- 7.times do |day| -%>
                    <%= content_tag("td", :class => "calendar-times", "d-pos" => "#{tm},#{day}") do -%>
                    <span></span>
                  <%- end -%>
                <%- end -%>
                </tr>
              <%- end -%>
            </table>
          </div>
        </div>
      </div>
    </div>

    <%= label_tag 'date_range_inclusive', 'Inclusive?', :class => "label" %>
    <%= check_box_tag 'inclusive', params[:inclusive], params[:inclusive]%>

    <%= label_tag 'days', 'Days of the Week', :class => "label" %>
    <div style="margin-bottom:10px">
      <%= check_box_tag 'days[]', '1', (params[:days] || []).include?('1') %> M
      <%= check_box_tag 'days[]', '2', (params[:days] || []).include?('2') %> T
      <%= check_box_tag 'days[]', '3', (params[:days] || []).include?('3') %> W
      <%= check_box_tag 'days[]', '4', (params[:days] || []).include?('4') %> TH
      <%= check_box_tag 'days[]', '5', (params[:days] || []).include?('5') %> F
      <%= check_box_tag 'days[]', '6', (params[:days] || []).include?('6') %> S
      <%= check_box_tag 'days[]', '0', (params[:days] || []).include?('0') %> SU
    </div>


    <div id="timerange" style="width:90%;margin: auto auto"></div>
    <div id="timerange-label" style="width:100%;text-align:center;margin-top:5px;margin-bottom:10px">

    </div>
    <%= hidden_field_tag 'from_time', params[:from_time] %>
    <%= hidden_field_tag 'to_time', params[:to_time] %>
    <%= select_tag('my_tz', time_zone_options_for_select(params[:my_tz] || Time.zone.name)) %>

    <%= hidden_field_tag 'map_bounds', params[:map_bounds] %>
    <%= hidden_field_tag 'map_center', params[:map_center] %>
    <%= hidden_field_tag 'map_zoom', params[:map_zoom] %>
  <%- end -%>


  <button class="button">Go</button>
  <button class="button save-button">Save</button>
  <%= link_to 'Clear', explore_path %>
  <div class="clear"></div>

  <%if @overlapping_subscriptions && (@overlapping_subscriptions.size > 1 || (@overlapping_subscriptions.size == 1 && @overlapping_subscriptions.first.search_subscription.user != current_user))%>
    <div class="block notice" style="margin-top:10px">
      <h4>Similar Users</h4>
      <%@overlapping_subscriptions.each do |overlapping_subscriber| %>
        <%if overlapping_subscriber.search_subscription.user != current_user%>
          <%= render 'shared/user_list_element', :user => overlapping_subscriber.search_subscription.user%>
        <%end%>
      <%end%>
    </div>
  <%end%>

  <div class="clear"></div>
<% end %>


<% content_for :end_of_body do %>
  <%= javascript_include_tag 'jquery.pageless', 'keywords_field', 'jquery.getUrlParam' %>
  <script>
    var keywordsJsonURL = "<%= event_types_path(:format => :json) %>";
    var refreshTimer = null;
    var keywordsParamKey = "keywords[]";

    function getSearchParams() {
      var str = "?map_bounds=" + $('#map_bounds').val() + "&map_center=" + $('#map_center').val() + "&map_zoom=" + $('#map_zoom').val();
      if($('[name="keywords\\[\\]"]').length > 0)
        return str + "&" + $('[name="keywords\\[\\]"]').serialize()
      else
        return str
    }

    function makePageless(numPages, currentPage) {
      $('#action-list').pageless({ totalPages: numPages,
        url: '<%= explore_path %>',
        params: $('form.search-params').serializeObject(),
        loaderMsg: 'Loading more results',
        currentPage: currentPage
      });
    }
     
    $('form.search-params').bind('ajax:beforeSend', function() {
      $('#action-list').fadeTo('fast', 0.5);
      $('#ajax-spinner').show();
      return true;
    }).bind('ajax:success', function() {
      // TODO Krum put this in to listen to wait until all requests are done, but sometimes with pageless the list never unfades
      //if ($.active == 1) {
      $('#action-list').fadeTo('fast', 1);
      //}
    }).bind('ajax:complete', function() {
      $('#ajax-spinner').hide();
    });

    $("form.search-params ").
      find('input[type="text"],input[type="text"],select,input[type="checkbox"]').not('.do-not-submit').
      change(refreshResults("explore")); // on change of the search form fields, refresh the results

    $('button.save-button').click(function(e) {
      var f = $('form.search-params');
      var s = f.serialize();
      window.location = '<%= new_search_subscription_url %>?' + s;
      return false;
    });

    $('.search-textarea').live('keydown', function(e) {
      if (e.keyCode == 13) {
        if(e.shiftKey != true){
          var f = $('form.search-params');
          var s = f.serialize();
          this.form.action = this.form.action + '?' + s;

          $(this).closest('.form-comment').submit();
          return false;
        }
      }
    });

    $('.calendar-times').click(function() {
      if($(this).hasClass('select')){
        // The day is selected, remove class and remove search conditions
        $(this).removeClass('select');
        $('form.search-params input[type="hidden"][value="'+ $(this).attr('d-pos') +'"]').remove();
      }
      else {
        $(this).addClass('select');
        $('form.search-params').append('<input type="hidden" name="date-search[]" value="' + $(this).attr('d-pos') + '" />');
      }
    });

    $( "#from_date" ).datepicker({
      dateFormat: 'M. dd, yy'
    });
    $( "#to_date" ).datepicker({
      dateFormat: 'M. dd, yy'
    });
    $('#timerange').slider({
      range: true,
      min: <%= DAY_FIRST_MINUTE %>,
      max: <%= DAY_LAST_MINUTE %>,
      step: 15,
      values: [<%= params[:from_time] || DAY_FIRST_MINUTE %>, <%= params[:to_time] || DAY_LAST_MINUTE %>],
      slide: slideTime,
      change: refreshResults("explore")
    });

    function initTimeLabel() {
      slideTime(null, {
        values: [
          $("#timerange").slider("values", 0) ,
          $("#timerange").slider("values", 1)
        ]
      }); // mimic slide event for time slider
    }

    function slideTime(event, ui) {
      var minutes0 = parseInt(ui.values[0] % 60);
      var hours0 = parseInt(ui.values[0] / 60 % 24);
      var minutes1 = parseInt(ui.values[1] % 60);
      var hours1 = parseInt(ui.values[1] / 60 % 24);
      var startTime = getTime(hours0, minutes0);
      var endTime = getTime(hours1, minutes1);
      $("#timerange-label").text(startTime + ' - ' + endTime);
      $('#from_time').val(ui.values[0]);
      $('#to_time').val(ui.values[1]);
    }

    function getTime(hours, minutes) {
      var time = null;
      minutes = minutes + "";
      if (hours < 12) {time = "AM";}
      else {  time = "PM";}
      if (hours == 0) {hours = 12;}
      if (hours > 12) {hours = hours - 12; }
      if (minutes.length == 1) {minutes = "0" + minutes;}
      return hours + ":" + minutes + " " + time;
    }

    initTimeLabel();

    makePageless(<%= @num_pages %>, <%= params[:page] || 1 %>);

  </script>
  <!-- This is already included in the header -->
  <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>

  <script>
    var markers = [];
    var sideMap;
    var selectedMarker;
    var infoWindow;
    var geocoder;
    var markerCluster;

    function clearMarkers() {
      $.each(markers, function(index, marker) {
        marker.setMap(null);
      });
      markers = [];
    }

    function placeMarker(location, title) {

      var marker = new google.maps.Marker({
        map: sideMap,
        position: location,
        title: title
      });

      google.maps.event.addListener(marker, 'click', function() {
        //selectMarker(marker, true); //Commented out until proper functionality is determined
      });
      markers.push(marker);
      //markerCluster.addMarkers(markers);
    }

    function selectMarker(marker) {
      selectedMarker = marker;

      if (marker.getAnimation() == null) {
        marker.setAnimation(google.maps.Animation.BOUNCE);
        setTimeout(function() {
          if (marker.getAnimation() == google.maps.Animation.BOUNCE) marker.setAnimation(null);
        }, 740);
      }

      infoWindow.setContent(marker.title);
      infoWindow.open(sideMap, marker);
    }
    
    $(function() {
      if(history && history.pushState) {
        //if(!$.browser.webit==true){
        $(window).bind("popstate", function(){

          var keywordParams = $(document).getUrlParam("keywords[]");
          if(typeof keywordParams == "string" || keywordParams == null)
            keywordParams = new Array(keywordParams);

          $.each(keywordParams, function(keywordIndex, keywordParam) {
            addKeyword(keywordParam, '#explore-keywords');
          });
          
          $.each(arraySubtract(existingKeywords('#explore-keywords'), keywordParams), function(mk, missingKeyword){
            removeKeyword(missingKeyword);
          });

          if($(document).getUrlParam("map_center") != null)
            sideMap.setCenter(new google.maps.LatLng($(document).getUrlParam("map_center").split(",")[0], $(document).getUrlParam("map_center").split(",")[1]))

          $.getScript(location.href);
        });
        //}
      }

      function moveMap(e) {
        var loc = e.target.value;
        geocoder.geocode( {
          'address': loc
        }, function(results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
            sideMap.setCenter(results[0].geometry.location);
            changeLocationParams();
            $('#location-not-found').hide();
          } else if (status == google.maps.GeocoderStatus.ZERO_RESULTS) {
            $('#location-not-found').show();
          }
        });
      }

      $('#map_location').keydown(function(e) {
        if (e.keyCode == 13) {
          e.stopPropagation();
          moveMap(e);
          return false;
        }
        return true;
      });

      /* geolocation and map stuff */
      var loc = new google.maps.LatLng(<%= params[:map_center].split(",").first %>, <%= params[:map_center].split(",").last %>);
  
      var myOptions = {
        zoom: <%= params[:map_zoom] %>,
        center: loc,
        mapTypeControl: false,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        streetViewControl: false
      };
      sideMap = new google.maps.Map(document.getElementById("location-map"), myOptions);
      //markerCluster = new MarkerClusterer(map);


  <% if params[:map_fit_bounds] == "1" && !params[:map_bounds].blank? %>
    <%# # order: ne_lat, ne_lng, sw_lat, sw_lng  %>
    <% ne_lat, ne_lng, sw_lat, sw_lng = params[:map_bounds].split(",") %>
        sideMap.fitBounds(new google.maps.LatLngBounds(
        new google.maps.LatLng(<%= sw_lat %>, <%= sw_lng %>),
        new google.maps.LatLng(<%= ne_lat %>, <%= ne_lng %>)));
  <% end %>
      infoWindow = new google.maps.InfoWindow();
      geocoder = new google.maps.Geocoder();

      function changeLocationParams(event) {
        setTimeout(function() {
          var zoom = sideMap.getZoom();
          $('#map_zoom').val(zoom);

          bounds = map.getBounds();
          ne = bounds.getNorthEast();
          sw = bounds.getSouthWest();
          c = bounds.getCenter();

          $('#map_bounds').val(ne.lat() + ',' + ne.lng() + ',' + sw.lat() + ',' + sw.lng());
          $('#map_center').val(c.lat() + ',' + c.lng());

          if(history && history.replaceState)
            history.replaceState(null, null, getSearchParams());
          refreshResults("explore");
        }, 15);
      }

      function refreshResults(caller) {
        if (refreshTimer) {
          clearInterval(refreshTimer);
          delete refreshTimer;
        }
        refreshTimer = setTimeout(function() {
          if(caller == "events")
            $.getScript('/events/load_events' + getSearchParams());
          else if(caller == "explore")
            $('form.search-params').submit();
        }, 250);
      } 

      google.maps.event.addListener(sideMap, 'zoom_changed', changeLocationParams);
      google.maps.event.addListener(sideMap, 'dragend', changeLocationParams);
      google.maps.event.addListener(sideMap, 'resize', changeLocationParams);
      //$(window).resize(changeLocationParams);

  <% @searchables.each do |searchable| %>
    <% #if searchable.event && searchable.geo_located? %>
    <% if searchable.geo_located? %>
          placeMarker(new google.maps.LatLng(<%= searchable.location.latitude %>, <%= searchable.location.longitude %>), '#');
    <% end %>
  <% end %>

    });
  </script>
<% end %>