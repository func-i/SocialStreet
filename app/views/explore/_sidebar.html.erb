<% content_for :sidebar do %>
  <%= form_tag '#', :method => :get, :remote => true, :class => "form search-params", "data-save-action" => search_subscriptions_path do %>


    <div class="block notice">
      <h4>Keywords</h4>

      <%= text_field_tag 'q', params[:q], :id=>"q-textfield", :class => "text_field do-not-submit", :placeholder => "Enter keywords here..." %>
      <ul id="keywords">
        <% (params[:keywords] || []).each do |keyword| %>
          <li class="keyword-pill">
            <input type="hidden" name="keywords[]" value="<%= keyword %>" />
            <%= keyword %>
            <%= link_to(image_tag('web-app-theme/icons/cross.png', :alt => "[X]"), '#', :class => "remove-parent", "data-parent-selector" => ".keyword-pill") %>
          </li>
        <% end %>
      </ul>
      <div class="clear"></div>
    </div>

    <div class="block notice" style="position:relative">
      <div id="location-not-found">Not Found</div>
      <%= text_field_tag 'map_location', params[:map_location], :class => "text_field do-not-submit", :placeholder => "Move map to ..." %>
      <div id="location-map" style="width:100%;height:300px;"></div>
      <%= hidden_field_tag 'map_bounds', params[:map_bounds] %>
      <%= hidden_field_tag 'map_center', params[:map_center] %>
      <%= hidden_field_tag 'map_zoom', params[:map_zoom] %>
    </div>

    <div class="block notice">
      <h4>Date Filtering</h4>
      <%= label_tag 'from_date', 'From', :class => "label" %>
      <%= text_field_tag 'from_date', params[:from_date], :class => "text_field" %>

      <%= label_tag 'to_date', 'To', :class => "label" %>
      <%= text_field_tag 'to_date', params[:to_date], :class => "text_field" %>

      <%= label_tag 'date_range_inclusive', 'Inclusive?', :class => "label" %>
      <%= check_box_tag 'inclusive', params[:inclusive], params[:inclusive]%>

      <%= label_tag 'days', 'Days of the Week', :class => "label" %>
      <div style="margin-bottom:10px">
        <%= check_box_tag 'days[]', '1', (params[:days] || []).include?('1') %> M
        <%= check_box_tag 'days[]', '2', (params[:days] || []).include?('2') %> T
        <%= check_box_tag 'days[]', '3', (params[:days] || []).include?('3') %> W
        <%= check_box_tag 'days[]', '4', (params[:days] || []).include?('4') %> TH
        <%= check_box_tag 'days[]', '5', (params[:days] || []).include?('5') %> F
        <%= check_box_tag 'days[]', '6', (params[:days] || []).include?('6') %> S
        <%= check_box_tag 'days[]', '0', (params[:days] || []).include?('0') %> SU
      </div>


      <div id="timerange" style="width:90%;margin: auto auto"></div>
      <div id="timerange-label" style="width:100%;text-align:center;margin-top:5px;margin-bottom:10px">

      </div>
      <%= hidden_field_tag 'from_time', params[:from_time] %>
      <%= hidden_field_tag 'to_time', params[:to_time] %>
      <%= select_tag('my_tz', time_zone_options_for_select(params[:my_tz] || Time.zone.name)) %>
    </div>

    <button class="button">Go</button>
    <button class="button save-button">Save</button>
    <%= link_to 'Clear', explore_path %>
    <div class="clear"></div>

    <%if @overlapping_subscriptions && (@overlapping_subscriptions.size > 1 || (@overlapping_subscriptions.size == 1 && @overlapping_subscriptions.first.search_subscription.user != current_user))%>
      <div class="block notice" style="margin-top:10px">
        <h4>Similar Users</h4>
        <%@overlapping_subscriptions.each do |overlapping_subscriber| %>
          <%if overlapping_subscriber.search_subscription.user != current_user%>
            <%= render 'shared/user_list_element', :user => overlapping_subscriber.search_subscription.user%>
          <%end%>
        <%end%>
      </div>
    <%end%>

    <div class="clear"></div>
  <% end %>
<% end %>

<% content_for :end_of_body do %>
  <%= javascript_include_tag 'jquery.pageless' %>
  <script>

    $(function() {

      function addKeyword(keyword) {
          if ($('#keywords .keyword-pill input[type="hidden"][value="'+keyword+'"]').size() > 0) return false;
          $('<li class="keyword-pill">' +
            '<input type="hidden" name="keywords[]" value="'+keyword+'">' +
            keyword +
            '<a href="#" class="remove-parent" data-parent-selector=".keyword-pill">' +
            '<img src="/images/web-app-theme/icons/cross.png" />' +
            '</li>').hide().appendTo($('#keywords')).fadeIn('slow');
          refreshResults();
      }

      $('.keyword-pill').live('ss:removed', function() {
        refreshResults();
      });

      $('#q-textfield').keydown(function(e) {
        if (e.keyCode == 13) {
          console.log('enter pressed');
          addKeyword(this.value);
          this.value = '';
          e.stopPropagation();
          return false;
        }
        return true;
      });


      var cache = {"ba": ['bax','ball','bullshit']},
      lastXhr;
      $( "#q-textfield" ).autocomplete({
        minLength: 2,
        source: function( request, response ) {
          var term = request.term;
          if ( term in cache ) {
            response( cache[ term ] );
            return;
          }

          lastXhr = $.getJSON( "<%= event_types_path(:format => :json) %>", request, function( data, status, xhr ) {
            cache[ term ] = data;
            if ( xhr === lastXhr ) {
              response( data );
            }
          });
        },
        select: function( event, ui ) {
          console.log('item selected');
          this.value = '';
          addKeyword(ui.item.value);
          return false;
        }
      });
    });

    var refreshTimer = null;
    function refreshResults() {
      if (refreshTimer) {
        clearInterval(refreshTimer);
        delete refreshTimer;
      }
      refreshTimer = setTimeout(function() {
        $('form.search-params').submit();
      }, 250);
    }

    function makePageless(numPages, currentPage) {
      $('#action-list').pageless({ totalPages: numPages,
        url: '<%= explore_path %>',
        params: $('form.search-params').serializeObject(),
        loaderMsg: 'Loading more results',
        currentPage: currentPage
      });
    }

    $(function() {
     
      $('form.search-params').bind('ajax:beforeSend', function() {
        $('#action-list').fadeTo('fast', 0.5);
        $('#ajax-spinner').show();
        return true;
      }).bind('ajax:success', function() {
        if ($.active == 1) {
          $('#action-list').fadeTo('fast', 1);
          $('#ajax-spinner').hide();
        }
      });

      $("form.search-params ").
        find('input[type="text"],input[type="text"],select,input[type="checkbox"]').not('.do-not-submit').
        change(refreshResults); // on change of the search form fields, refresh the results

      $('button.save-button').click(function(e) {
        var f = $('form.search-params');
        var s = f.serialize();
        window.location = '<%= new_search_subscription_url %>?' + s;
        return false;
      });

      $('button.comment-button').click(function(e) {
        var f = $('form.search-params');
        var s = f.serialize();
        this.form.action = this.form.action + '?' + s;
      });

      $( "#from_date" ).datepicker({
        dateFormat: 'M. dd, yy'
      });
      $( "#to_date" ).datepicker({
        dateFormat: 'M. dd, yy'
      });
      $('#timerange').slider({
        range: true,
        min: <%= DAY_FIRST_MINUTE %>,
        max: <%= DAY_LAST_MINUTE %>,
        step: 15,
        values: [<%= params[:from_time] || DAY_FIRST_MINUTE %>, <%= params[:to_time] || DAY_LAST_MINUTE %>],
        slide: slideTime,
        change: refreshResults
      });

      function initTimeLabel() {
        slideTime(null, {
          values: [
            $("#timerange").slider("values", 0) ,
            $("#timerange").slider("values", 1)
          ]
        }); // mimic slide event for time slider
      }

      function slideTime(event, ui) {
        var minutes0 = parseInt(ui.values[0] % 60);
        var hours0 = parseInt(ui.values[0] / 60 % 24);
        var minutes1 = parseInt(ui.values[1] % 60);
        var hours1 = parseInt(ui.values[1] / 60 % 24);
        var startTime = getTime(hours0, minutes0);
        var endTime = getTime(hours1, minutes1);
        $("#timerange-label").text(startTime + ' - ' + endTime);
        $('#from_time').val(ui.values[0]);
        $('#to_time').val(ui.values[1]);
      }

      function getTime(hours, minutes) {
        var time = null;
        minutes = minutes + "";
        if (hours < 12) {time = "AM";}
        else {  time = "PM";}
        if (hours == 0) {hours = 12;}
        if (hours > 12) {hours = hours - 12; }
        if (minutes.length == 1) {minutes = "0" + minutes;}
        return hours + ":" + minutes + " " + time;
      }

      initTimeLabel();

      makePageless(<%= @num_pages %>, <%= params[:page] || 1 %>);

    });


  </script>
  <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>

  <script>
    var markers = [];
    var map;
    var selectedMarker;
    var infoWindow;
    var geocoder;

    function clearMarkers() {
      $.each(markers, function(index, marker) {
        marker.setMap(null);
      });
      markers = [];
    }

    function placeMarker(location, title) {

      var marker = new google.maps.Marker({
        map: map,
        position: location,
        title: title
      });

      google.maps.event.addListener(marker, 'click', function() {
        selectMarker(marker, true);
      });
      markers.push(marker);
    }

    function selectMarker(marker) {
      selectedMarker = marker;

      if (marker.getAnimation() == null) {
        marker.setAnimation(google.maps.Animation.BOUNCE);
        setTimeout(function() {
          if (marker.getAnimation() == google.maps.Animation.BOUNCE) marker.setAnimation(null);
        }, 740);
      }

      infoWindow.setContent(marker.title);
      infoWindow.open(map, marker);
    }
    
    $(function() {

      function moveMap(e) {
        var loc = e.target.value;
        geocoder.geocode( {
          'address': loc
        }, function(results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
            map.setCenter(results[0].geometry.location);
            changeLocationParams();
            $('#location-not-found').hide();
          } else if (status == google.maps.GeocoderStatus.ZERO_RESULTS) {
            $('#location-not-found').show();
          }
        });
      }

      $('#map_location').keydown(function(e) {
        if (e.keyCode == 13) {
          e.stopPropagation();
          moveMap(e);
          return false;
        }
        return true;
      });

      /* geolocation and map stuff */
      var loc = new google.maps.LatLng(<%= params[:map_center].split(",").first %>, <%= params[:map_center].split(",").last %>);
  
      var myOptions = {
        zoom: <%= params[:map_zoom] %>,
        center: loc,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        streetViewControl: false
      };
      map = new google.maps.Map(document.getElementById("location-map"), myOptions);
  <% if params[:map_fit_bounds] == "1" && !params[:map_bounds].blank? %>
    <%# # order: ne_lat, ne_lng, sw_lat, sw_lng  %>
    <% ne_lat, ne_lng, sw_lat, sw_lng = params[:map_bounds].split(",") %>
        map.fitBounds(new google.maps.LatLngBounds(
        new google.maps.LatLng(<%= sw_lat %>, <%= sw_lng %>),
        new google.maps.LatLng(<%= ne_lat %>, <%= ne_lng %>)));
  <% end %>
      infoWindow = new google.maps.InfoWindow();
      geocoder = new google.maps.Geocoder();

      function changeLocationParams(event) {
        setTimeout(function() {
          var zoom = map.getZoom();
          $('#map_zoom').val(zoom);

          bounds = map.getBounds();
          ne = bounds.getNorthEast();
          sw = bounds.getSouthWest();
          c = bounds.getSouthWest();

          $('#map_bounds').val(ne.lat() + ',' + ne.lng() + ',' + sw.lat() + ',' + sw.lng());
          $('#map_center').val(c.lat() + ',' + c.lng());
          refreshResults();
        }, 15);
      }

      google.maps.event.addListener(map, 'zoom_changed', changeLocationParams);
      google.maps.event.addListener(map, 'dragend', changeLocationParams);
      google.maps.event.addListener(map, 'resize', changeLocationParams);
      //$(window).resize(changeLocationParams);

  <% @searchables.each do |searchable| %>
    <% if searchable.event && searchable.geo_located? %>
          placeMarker(new google.maps.LatLng(<%= searchable.location.latitude %>, <%= searchable.location.longitude %>), '<%= escape_javascript(searchable.event.name) %>');
    <% end %>
  <% end %>

    });
  </script>
<% end %>