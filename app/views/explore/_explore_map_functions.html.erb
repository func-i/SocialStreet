<% content_for :end_of_body do %>
  <script type='text/javascript'>
    var allMarkers_;
    var gridSize_;
    var projectionHelperOverlay_;
    var selectedMarker;

    $(function(){
      initMapVariables();

      google.maps.event.addListenerOnce(sideMap, 'idle', function() {
        createMarkersFromResults();
      });

  <% if params[:view].eql?('map') %>
      $.each($('.result-list-item'), function(index, rLI) {
        $(rLI).hide();
      });
  <% end %>
  });

  function initMapVariables(){
    allMarkers_ = [];
    gridSize_ = 15;

    projectionHelperOverlay_var = new ProjectionHelperOverlay_(sideMap);
  }

  function userSelectMarker(marker){
    //Set address of result list
    if(marker.geocodableAddress_ != null){
      $('.address').html('Near ' + marker.geocodableAddress_);
    }else{
      $('.address').html('');
    }

    marker.selected_ = true;
      
    //set searchable id field for maintaining on refresh
    $('#selected_searchable').val(marker.searchableID_);
  }
  function setSelectedMarker(marker) {
    //New selected marker - set old marker to regular icon
    if(selectedMarker != null && selectedMarker != marker)
    {
      selectedMarker.setIcon("/images/map_pin.png");
      selectedMarker.selected_ = false;
      if(selectedMarker.clusteredMarkers_){
        $.each(selectedMarker.clusteredMarkers_, function(index, marker){
          marker.selected_ = false;
        });
      }
    }

    //Set marker
    selectedMarker = marker;

    selectedMarker.setIcon("/images/ico-pin-selected.png");

    //Hide each element in the map result list
    $.each($('.result-list-item'), function(index, rLI) {
      $(rLI).hide();
    });

    //Show each searchable attached to the selected marker
    $('#result_for_searchable_' + selectedMarker.searchableID_).show();
    if(selectedMarker.clusteredMarkers_){
      $.each(selectedMarker.clusteredMarkers_, function(index, marker){
        $('#result_for_searchable_' + marker.searchableID_).show();
      });
    }
  }

  function clearMarkers(){
    $.each(allMarkers_, function(index, marker){
      marker.setMap(null);
      marker.label_.setMap(null);
    });
    delete allMarkers_;
    allMarkers_ = [];

    $('.address').html('');
  }

  function createMarkersFromResults() {
    //Place pins on map
  <% (@searchables || []).each do |searchable| %>
    <% if searchable.geo_located? %>
        createMarker(new google.maps.LatLng(<%= searchable.location.latitude %>, <%= searchable.location.longitude %>), <%= searchable.id -%>,'<%= searchable.location_address_for_explore -%>');
    <% end %>
  <% end %>

  <% (@similar_results || []).each do |searchable| %>
    <% if searchable.geo_located? %>
        createMarker(new google.maps.LatLng(<%= searchable.location.latitude %>, <%= searchable.location.longitude %>), <%= searchable.id -%>,'<%= searchable.location_address_for_explore -%>');
    <% end %>
  <% end %>

    //Draw all the markers
    placeAllMarkers();
  }


  function createMarker(location, searchableID, geocodableAddress) {
    var icoImage = "/images/map_pin.png";
    var selected = false;

  <% if params[:view].eql?('map') %>
      if(searchableID == $('#selected_searchable').val()){
        icoImage = '/images/ico-pin-selected.png';
        selected = true;
      }
  <% end %>

    var marker = new google.maps.Marker({
      position: location,
      icon: icoImage
    });
    marker.setMap(null);
    marker.searchableID_ = searchableID;
    marker.geocodableAddress_ = geocodableAddress;
    marker.clusteredMarker_ = [];
    marker.selected_ = selected;

    marker.label_ = new Label();
    marker.label_.set('zIndex', marker.getZIndex() - 100);//TODO - doesn't work'
    marker.label_.bindTo('position', marker, 'position');
    marker.label_.set('text', '');

    if(selected){
      userSelectMarker(marker);
    }

  <% if params[:view].eql?('map') %>
      //Add listener for the click event
      google.maps.event.addListener(marker, 'click', function()
      {
        marker.setIcon("/images/ico-pin-selected.png");
        userSelectMarker(this);
        setSelectedMarker(this);
      });
  <% end %>

    //TODO - handle selected state

    //Push marker onto marker array
    allMarkers_.push(marker);
  }

  function placeAllMarkers(){
    var markerArr_ = allMarkers_.slice(0);//create copy of markers
    allMarkers_ = [];//empty the allMarkers array
    var select_marker = null;

    //Loop through all the markers and replace
    for(var i =0; marker = markerArr_[i]; i++){
      resetMarker_(marker);

      if(ownerMarker = clusterWith_(marker)){
        if(!ownerMarker.clusteredMarkers_){
          ownerMarker.clusteredMarkers_ = [];
        }
        ownerMarker.clusteredMarkers_.push(marker);

        if(marker.selected_){
          select_marker = ownerMarker;
        }
        ownerMarker.label_.set('text', ownerMarker.clusteredMarkers_.length + 1);
      }
      else{
        if(marker.selected_){
          select_marker = marker
        }

        //Display marker
        marker.setMap(sideMap);
        marker.label_.set('map', sideMap);

        //Set bounds
        var bounds = new google.maps.LatLngBounds(marker.getPosition(), marker.getPosition());
        marker.extendedBounds_ = getExtendedBounds_(bounds);
      }

      //Push marker back onto marker array
      allMarkers_.push(marker);
    }

    if(select_marker)
      setSelectedMarker(select_marker);
    else{
  <% if params.eql?('map') %>
      $('.address').html('');
  <% end %>
    }
    markerArr_ = null;
  }

  function resetMarker_(marker){
    delete marker.clusteredMarkers_;
    marker.clusteredMarkers_= [];
    marker.extendedBounds_ = null;
    marker.setMap(null);
    marker.label_.set('text', '');
    marker.label_.set('map', null);
    marker.setIcon("/images/map_pin.png");
  }

  function clusterWith_(markerToPlace){
    //loop through every marker and choose closest marker to location
    var distance = 40000;//large number
    var markerToAddTo = null;
    var markerToPlacePosition = markerToPlace.getPosition();

    for(var i =0; placedMarker = allMarkers_[i]; i++){
      if(placedMarker.getMap()){
        var position = placedMarker.getPosition();
        if(position){
          var d = distanceBetweenPoints_(position, markerToPlacePosition);
          if(d < distance){
            distance = d;
            markerToAddTo = placedMarker;
          }
        }
      }
    }

    if(markerToAddTo && isWithinMarkerBound_(markerToAddTo, markerToPlacePosition)){
      return markerToAddTo;
    }
    else{
      return null;
    }
  }

  /*From MarkerClusterer*/
  function distanceBetweenPoints_(clusterPosition, markerToPlacePosition){
    if(!clusterPosition || !markerToPlacePosition){
      return 0
    }

    var R = 6371; //Radius of Earth in km
    var dLat = (markerToPlacePosition.lat() - clusterPosition.lat()) * Math.PI / 180;
    var dLon = (markerToPlacePosition.lng() - clusterPosition.lng()) * Math.PI / 180;
    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      (Math.cos(clusterPosition.lat() * Math.PI / 180) * Math.cos(markerToPlacePosition.lat() * Math.PI / 180) *
      Math.sin(dLon / 2) * Math.sin(dLon / 2));
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    var d = R * c;
    return d;
  }

  function isWithinMarkerBound_(markerToAddTo, markerToPlacePosition){
    return markerToAddTo.extendedBounds_.contains(markerToPlacePosition);
  }

  /*From MarkerClusterer*/
  function getExtendedBounds_(bounds){
    var projection = projectionHelperOverlay_var.getProjection();

    // Turn the bounds into latlng.
    var tr = new google.maps.LatLng(bounds.getNorthEast().lat(),
    bounds.getNorthEast().lng());
    var bl = new google.maps.LatLng(bounds.getSouthWest().lat(),
    bounds.getSouthWest().lng());

    // Convert the points to pixels and the extend out by the grid size.
    var trPix = projection.fromLatLngToDivPixel(tr);
    trPix.x += gridSize_;
    trPix.y -= gridSize_;

    var blPix = projection.fromLatLngToDivPixel(bl);
    blPix.x -= gridSize_;
    blPix.y += gridSize_;

    // Convert the pixel points back to LatLng
    var ne = projection.fromDivPixelToLatLng(trPix);
    var sw = projection.fromDivPixelToLatLng(blPix);

    // Extend the bounds to contain the new bounds.
    bounds.extend(ne);
    bounds.extend(sw);

    return bounds;
  }

  /**@private
   * In V3 it is quite hard to gain access to Projection and Panes.
   * This is a helper class
   * @param {google.maps.Map} map
   */
  function ProjectionHelperOverlay_(map) {
    google.maps.OverlayView.call(this);
    this.setMap(map);
  }

  ProjectionHelperOverlay_.prototype = new google.maps.OverlayView();
  ProjectionHelperOverlay_.prototype.draw = function () {
    if (!this.ready) {
      this.ready = true;
      google.maps.event.trigger(this, 'ready');
    }
  };


  // Define the overlay, derived from google.maps.OverlayView
  function Label(opt_options) {
    // Initialization
    this.setValues(opt_options);

    // Here go the label styles
    var span = this.span_ = document.createElement('span');
    span.style.cssText = 'position: relative; left: -50%; top: -10px; ' +
      'white-space: nowrap;color:#FF0000;' +
      'padding: 2px;font-family: Arial; font-weight: bold;' +
      'font-size: 8px;';

    var div = this.div_ = document.createElement('div');
    div.appendChild(span);
    div.style.cssText = 'position: absolute; display: none';
  };

  Label.prototype = new google.maps.OverlayView;

  Label.prototype.onAdd = function() {
    var pane = this.getPanes().overlayImage;
    pane.appendChild(this.div_);

    // Ensures the label is redrawn if the text or position is changed.
    var me = this;
    this.listeners_ = [
      google.maps.event.addListener(this, 'position_changed',
      function() { me.draw(); }),
      google.maps.event.addListener(this, 'text_changed',
      function() { me.draw(); }),
      google.maps.event.addListener(this, 'zindex_changed',
      function() { me.draw(); })
    ];
  };

  // Implement onRemove
  Label.prototype.onRemove = function() {
    this.div_.parentNode.removeChild(this.div_);

    // Label is removed from the map, stop updating its position/text.
    for (var i = 0, I = this.listeners_.length; i < I; ++i) {
      google.maps.event.removeListener(this.listeners_[i]);
    }
  };

  // Implement draw
  Label.prototype.draw = function() {
    var projection = this.getProjection();
    var position = projection.fromLatLngToDivPixel(this.get('position'));
    var div = this.div_;
    div.style.left = position.x + 'px';
    div.style.top = (position.y - 25) + 'px';
    div.style.display = 'block';
    div.style.zIndex = 1//this.get('zIndex'); //ALLOW LABEL TO OVERLAY MARKER
    this.span_.innerHTML = this.get('text').toString();
  };


  </script>
<% end %>